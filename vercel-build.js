/**
 * Script de pr√©paration pour le d√©ploiement Vercel
 * Ce script s'assure que tous les fichiers n√©cessaires sont copi√©s et les r√©pertoires cr√©√©s
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('=== D√âBUT DE LA PR√âPARATION POUR VERCEL ===');

// S'assurer que nous sommes dans le bon r√©pertoire
const projectRoot = __dirname;
console.log(`R√©pertoire racine du projet: ${projectRoot}`);

// Fonction pour cr√©er un r√©pertoire s'il n'existe pas
function ensureDir(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ R√©pertoire cr√©√©: ${dirPath}`);
  } else {
    console.log(`‚ÑπÔ∏è R√©pertoire existe d√©j√†: ${dirPath}`);
  }
}

// Fonction pour copier un fichier
function copyFile(src, dest) {
  try {
    fs.copyFileSync(src, dest);
    console.log(`‚úÖ Fichier copi√©: ${src} -> ${dest}`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de la copie de ${src} vers ${dest}:`, error.message);
  }
}

// Fonction pour compiler un fichier TS en JS
function compileFile(file) {
  try {
    console.log(`üîÑ Compilation de ${file}...`);
    execSync(`npx esbuild ${file} --platform=node --packages=external --format=esm --outfile=${file.replace('.ts', '.js')}`);
    console.log(`‚úÖ Compilation r√©ussie: ${file}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la compilation de ${file}:`, error.message);
    return false;
  }
}

// Cr√©er les r√©pertoires n√©cessaires
ensureDir(path.join(projectRoot, 'dist'));
ensureDir(path.join(projectRoot, 'dist/db'));

// Liste des fichiers TS √† compiler
const filesToCompile = [
  'db/schema.ts',
  'db/index.ts',
];

// Compiler les fichiers TS
console.log('\n=== COMPILATION DES FICHIERS TS ===');
filesToCompile.forEach(file => {
  const fullPath = path.join(projectRoot, file);
  if (fs.existsSync(fullPath)) {
    compileFile(fullPath);
  } else {
    console.warn(`‚ö†Ô∏è Le fichier ${fullPath} n'existe pas.`);
  }
});

// Copier les fichiers compil√©s vers le r√©pertoire dist
console.log('\n=== COPIE DES FICHIERS VERS DIST ===');
filesToCompile.forEach(file => {
  const srcFile = path.join(projectRoot, file.replace('.ts', '.js'));
  const destFile = path.join(projectRoot, 'dist', file.replace('.ts', '.js'));
  
  if (fs.existsSync(srcFile)) {
    // Cr√©er le r√©pertoire du fichier de destination si n√©cessaire
    ensureDir(path.dirname(destFile));
    copyFile(srcFile, destFile);
  } else {
    console.warn(`‚ö†Ô∏è Le fichier compil√© ${srcFile} n'existe pas.`);
  }
});

console.log('\n=== V√âRIFICATION DE LA STRUCTURE FINALE ===');
const distDbDir = path.join(projectRoot, 'dist/db');
if (fs.existsSync(distDbDir)) {
  console.log(`üìÇ Contenu du r√©pertoire ${distDbDir}:`);
  fs.readdirSync(distDbDir).forEach(file => {
    console.log(`  - ${file}`);
  });
} else {
  console.error(`‚ùå Le r√©pertoire ${distDbDir} n'existe pas!`);
}

console.log('\n=== FIN DE LA PR√âPARATION POUR VERCEL ==='); 